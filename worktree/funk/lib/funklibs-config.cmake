
include(FindPackageHandleStandardArgs)

get_filename_component(LOCAL_DIR ${CMAKE_CURRENT_LIST_FILE} PATH)

#set(_root_dir "${_cur_dir}/../../../")
#get_filename_component(ROOT_DIR ${_root_dir} ABSOLUTE)

set(SDL_INCLUDE_DIRS "${LOCAL_DIR}/sdl/include;" CACHE STRING "" FORCE)
set(SDL_DEPENDS "" CACHE STRING "" FORCE)
set(SDL_DEFINITIONS "" CACHE STRING "" FORCE)
set(SDL_LIBRARIES "${LOCAL_DIR}/sdl/lib/SDL.lib" "${LOCAL_DIR}/sdl/lib/SDLmain.lib")
FIND_PACKAGE_HANDLE_STANDARD_ARGS(SDL DEFAULT_MSG SDL_LIBRARIES SDL_INCLUDE_DIRS)
set(SDL_PACKAGE_FOUND ${SDL_FOUND} CACHE INTERNAL "" FORCE)

# GLEW

set(GLEW_INCLUDE_DIRS "${LOCAL_DIR}/glew/include;" CACHE STRING "" FORCE)
set(GLEW_DEPENDS "" CACHE STRING "" FORCE)
set(GLEW_DEFINITIONS "" CACHE STRING "" FORCE)
set(GLEW_LIBRARIES "${LOCAL_DIR}/glew/lib/glew32.lib" "${LOCAL_DIR}/glew/lib/glut32.lib" "glu32.lib" "opengl32.lib")
FIND_PACKAGE_HANDLE_STANDARD_ARGS(GLEW DEFAULT_MSG GLEW_LIBRARIES GLEW_INCLUDE_DIRS)
set(GLEW_PACKAGE_FOUND ${GLEW_FOUND} CACHE INTERNAL "" FORCE)

# DevIL

set(DEVIL_INCLUDE_DIRS "${LOCAL_DIR}/devil/include;" CACHE STRING "" FORCE)
set(DEVIL_DEPENDS "" CACHE STRING "" FORCE)
set(DEVIL_DEFINITIONS "" CACHE STRING "" FORCE)
set(DEVIL_LIBRARIES "${LOCAL_DIR}/devil/lib/DevIL.lib" "${LOCAL_DIR}/devil/lib/ILU.lib" "${LOCAL_DIR}/devil/lib/ILUT.lib")
FIND_PACKAGE_HANDLE_STANDARD_ARGS(DEVIL DEFAULT_MSG DEVIL_LIBRARIES DEVIL_INCLUDE_DIRS)
set(DEVIL_PACKAGE_FOUND ${DEVIL_FOUND} CACHE INTERNAL "" FORCE)

# fmod

set(FMOD_INCLUDE_DIRS "${LOCAL_DIR}/fmod/include;" CACHE STRING "" FORCE)
set(FMOD_DEPENDS "" CACHE STRING "" FORCE)
set(FMOD_DEFINITIONS "" CACHE STRING "" FORCE)
set(FMOD_LIBRARIES "${LOCAL_DIR}/fmod/lib/fmodex_vc.lib")
FIND_PACKAGE_HANDLE_STANDARD_ARGS(FMOD DEFAULT_MSG FMOD_LIBRARIES FMOD_INCLUDE_DIRS)
set(FMOD_PACKAGE_FOUND ${FMOD_FOUND} CACHE INTERNAL "" FORCE)



#set(GLEW_INCLUDE_DIRS "${LOCAL_DIR}/glew/include;" CACHE STRING "" FORCE)

# -----------
 #find_library(TINYXML_DEBUG_LIBRARY tinyxml_d)
#find_library(TINYXML_LIBRARY       tinyxml)


#if (TINYXML_DEBUG_LIBRARY)
 # set(TINYXML_LIBRARIES optimized;${TINYXML_LIBRARY};debug;${TINYXML_DEBUG_LIBRARY})
#else()
  #set(TINYXML_LIBRARIES ${TINYXML_LIBRARY})
#endif()
#set(TINYXML_LIBRARIES "${TINYXML_LIBRARIES}" CACHE STRING "" FORCE)
#mark_as_advanced(TINYXML_LIBRARIES)
 
#include(FindPackageHandleStandardArgs)
#FIND_PACKAGE_HANDLE_STANDARD_ARGS(TINYXML DEFAULT_MSG
  #TINYXML_LIBRARIES
#  TINYXML_INCLUDE_DIRS
#)
# Right after find_package_handle_standard_args, _FOUND is
# set correctly.
# For instance, if foo/bar.h is not foud, FOO_FOUND is FALSE.
# But, right after this, since foo-config.cmake HAS been found, CMake
# re-set FOO_FOUND to TRUE.
# So we set _PACKAGE_FOUND in cache...
#set(TINYXML_PACKAGE_FOUND ${TINYXML_FOUND} CACHE INTERNAL "" FORCE)
 