
// opencv_tests.gm

Log("opencv_tests.gm: Initializing...");

global MakeOpenCVTest = function()
{
    local Main = {
    };

    Main.Init = function()
    {
        .update_id = this:thread(.Update);

        .stream_video0 = false;
        .stream_video1 = false;

		.cam2d = Cam2d();
		.cam2d.InitScreenSpaceSize( Window.GetDimen() );
		.cam2d.SetNearFar(v2(-1000.0f, 1000.0f ));

        .videoleft = Texture( g_resourcePathPrefix + "common/img/videoleft.png" );
        .videoright = Texture( g_resourcePathPrefix + "common/img/videoright.png" );
        .videodisparity = Texture( .videoleft.Dimen() );

        .matleft = GMOpenCVMat(.videoleft.Dimen());
        .matleft.ReadFromTexture(.videoleft);

        .gauss_sigma1 = 1.0f;
        .gauss_sigma2 = 0.0f;
        .bilat_diameter = 1;
        .bilat_sigma1 = 5.0f;
        .bilat_sigma2 = 5.0f;
        .sobel_kernel_size = 3;
        .sobel_scale = 1.0f;
        .sobel_delta = 0.0f;
        .canny_kernel_size = 3;
        .canny_threshold_low = 1.0f;
        .canny_threshold_high = 1.0f;
    };

    Main.Release = function()
    {
        threadKill(.update_id);
    };

    Main.ClearScreen = function()
    {
		Gfx.ClearColor( Gfx.BLUE * v3(0.1f), 1.0f );
		Gfx.ClearDepth(1.0f);
		Gfx.Clear( Gfx.COLOR_BUFFER_BIT | Gfx.DEPTH_BUFFER_BIT );
    };

    Main.Gui = function()
    {
        //if (!g_norobot)
        //{
            Gui.Begin("OpenCV Test", g_core.screenDimen.x.Int()-230, g_core.screenDimen.y.Int() - 5);

            //.stream_video0 = Gui.CheckBox("Stream Video (Top)", .stream_video0);
            //.stream_video1 = Gui.CheckBox("Stream Video (Bottom)", .stream_video1);

            .gauss_sigma1 = Gui.SliderFloat("Guass - Sigma 1", .gauss_sigma1, 0.01f, 2.0f);
            .gauss_sigma2 = Gui.SliderFloat("Guass - Sigma 2", .gauss_sigma2, 0.01f, 2.0f);
            .bilat_diameter = Gui.SliderInt("Bilat - Diameter", .bilat_diameter, 1, 20);
            .bilat_sigma1 = Gui.SliderFloat("Bilat - Sigma 1", .bilat_sigma1, 0.01f, 100.0f);
            .bilat_sigma2 = Gui.SliderFloat("Bilat - Sigma 2", .bilat_sigma2, 0.01f, 100.0f);
            .sobel_kernel_size = Gui.SliderInt("Sobel - Kernel Size", .sobel_kernel_size, 1, 15);
            .sobel_scale = Gui.SliderFloat("Sobel - Scale", .sobel_scale, 0.01f, 10.0f);
            .sobel_delta = Gui.SliderFloat("Sobel - Delta", .sobel_delta, 0.0f, 10.0f);
            .canny_kernel_size = Gui.SliderInt("Canny - Kernel Size", .canny_kernel_size, 1, 15);
            .canny_threshold_low = Gui.SliderFloat("Canny - Threshold Low", .canny_threshold_low, 0.01f, 50.0f);
            .canny_threshold_high = Gui.SliderFloat("Canny - Threshold High", .canny_threshold_high, 0.1f, 50.0f);

            //if (Gui.Button("Blur"))
            //{
                .matleft.ReadFromTexture(.videoleft);

                // basic filter tests
                //.matleft.GaussianBlur(3, .gauss_sigma1, .gauss_sigma2);
                //.matleft.BilateralFilter(.bilat_diameter, .bilat_sigma1, .bilat_sigma2);
                //.matleft.SobelFilter(.sobel_kernel_size, .sobel_scale, .sobel_delta);

                // filter chain test

                .matleft.GaussianBlur(3, .gauss_sigma1, .gauss_sigma2);
                .matleft.BilateralFilter(.bilat_diameter, .bilat_sigma1, .bilat_sigma2);
                .matleft.SobelFilter(.sobel_kernel_size, .sobel_scale, .sobel_delta);

                // random test

                .matleft.CannyThreshold(.canny_kernel_size, .canny_threshold_low, .canny_threshold_high);

                .matleft.WriteToTexture(.videodisparity);
            //}

            Gui.End();

            //.video0.SetActive(.stream_video0);
            //.video1.SetActive(.stream_video1);

            //.video0.Update();
            //.video1.Update();
        //}

        .DrawDualVideo();
    };

    Main.DrawDualVideo = function()
    {
		Gfx.Viewport( v2(0.0f), g_core.screenDimen );
		Gfx.BeginDefaultShader();

        .cam2d.Begin();

		Gfx.Color(Gfx.WHITE, 1.0f);

        local vscale = 2.0f;
		local vsize = v2(160.0f, 120.0f) * vscale;
		local vpos = g_core.screenDimen * v2(0.2f, 0.2f) - vsize * 0.5f;

        .videoleft.Bind(0);
		Gfx.DrawRectTexCoords( vpos, vsize );
        .videoleft.Unbind();
        
        vpos = vpos + v2(vsize.x + 32.0f, 0.0f);

        .videoright.Bind(0);
		Gfx.DrawRectTexCoords( vpos, vsize );
        .videoright.Unbind();

        vpos = vpos + v2(vsize.x * -0.5f - 16.0f, vsize.y + 32.0f);

        .videodisparity.Bind(0);
		Gfx.DrawRectTexCoords( vpos, vsize );
        .videodisparity.Unbind();

        .cam2d.End();

		Gfx.EndDefaultShader();
		Gfx.Viewport( v2(0), g_core.screenDimen );
    };

    Main.Update = function()
    {
        while (true)
        {
    		RegisterDraw( DrawLayers.Clear, .ClearScreen, this );
    		RegisterGui( .Gui, this );			

            yield();
        }
    };

    Main.Init();
    return Main;
};
