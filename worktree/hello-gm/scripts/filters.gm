
// init.gm

Log("init.gm: Initializing...");

/*

generate sets of lines from sobel filter
find lines of similar vector shapes in alternate image
compare offsets with original image lines
* can we use offsets to estimate depth?
for pairs of L-shaped lines, generate triangles
take lower-res estimates of triangle regions
look for similar blocks in other image
* what about circular regions? we should still curves from sobel filtered
* we can reduce threshold and compare line lengths to see fall-off of a given line
* we can take projected line intersections and estimate occluded quads/joins
* higher edge strength indicates solid/furniture objects



*/

global MakeImageFilters = function()
{
    ImageFilters = {
        chain = table(),
        final = Texture(v2(8.0f, 8.0f)),
    };

    ImageFilters.MakeSobelFilter = function()
    {
        local filter = {
            enabled = true,
            threshold = 32,
            tex = null,
        };

        filter.Gui = function()
        {
            Gui.Print("Sobel Filter");
            .threshold = Gui.SliderInt("Threshold", .threshold, 0, 255);
        };

        filter.Apply = function(out, in_)
        {
            Filter.SobelARGB(out, in_, .threshold);
        };

        return filter;
    };

    ImageFilters.MakeBilateralFilter = function()
    {
        local filter = {
            enabled = true,
            spatial_sigma = 1.0f,
            edge_sigma = 1.0f,
            tex = null,
        };

        filter.Gui = function()
        {
            Gui.Print("Bilateral Filter");
            .spatial_sigma = Gui.SliderFloat("Spatial Sigma", .spatial_sigma, 0.0f, 1.0f);
            .edge_sigma = Gui.SliderFloat("Edge Sigma", .edge_sigma, 0.0f, 1.0f);
        };

        filter.Apply = function(out, in_)
        {
            Filter.BilateralARGB(out, in_, .spatial_sigma, .edge_sigma);
        };

        return filter;
    };

    ImageFilters.MakeBoxBlurFilter = function()
    {
        local filter = {
            enabled = true,
            tex = null,
        };

        filter.Gui = function()
        {
            Gui.Print("Box Blur");
        };

        filter.Apply = function(out, in_)
        {
            Filter.BoxBlurARGB(out, in_, .threshold);
        };

        return filter;
    };

    ImageFilters.MakeGaussianBlurFilter = function()
    {
        local filter = {
            enabled = true,
            sigma = 1.0f,
            tex = null,
        };

        filter.Gui = function()
        {
            Gui.Print("Gaussian Blur");
            .sigma = Gui.SliderFloat("Sigma", .sigma, 0.05f, 2.0f);
        };

        filter.Apply = function(out, in_)
        {
            Filter.GaussianBlurARGB(out, in_, .sigma);
        };

        return filter;
    };

    ImageFilters.MakeHoughTransformFilter = function()
    {
        local filter = {
            enabled = true,
            theta_steps = 128,
            rho_bins = 128,
            rho_threshold = 1,
            tex = null,
        };

        filter.Gui = function()
        {
            Gui.Print("Hough Transform");
            .theta_steps = Gui.SliderInt("Theta Steps", .theta_steps, 1, 256);
            .rho_bins = Gui.SliderInt("Rho Bins", .rho_bins, 1, 256);
            .rho_threshold = Gui.SliderInt("Rho Threshold", .rho_threshold, 0, 64);
        };

        filter.Apply = function(out, in_)
        {
            Filter.HoughTransformARGB(out, in_, .theta_steps, .rho_bins, .rho_threshold);
        };

        return filter;
    };

    ImageFilters.MakeHoughLinesFilter = function()
    {
        local filter = {
            enabled = true,
            peak_threshold = 0.5f,
            tex = null,
        };

        filter.Gui = function()
        {
            Gui.Print("Hough Transform");
            .peak_threshold = Gui.SliderFloat("Peak Threshold", .peak_threshold, 0.0f, 1.0f);
        };

        filter.Apply = function(out, in_)
        {
            Filter.HoughLinesARGB(out, in_, .peak_threshold);
        };

        return filter;
    };

    ImageFilters.Gui = function()
    {
        Gui.Begin("Filters", g_core.screenDimen.x.Int()-650, g_core.screenDimen.y.Int() - 5);

        Gui.Separator();

        if (Gui.Button("Clear")) { .Clear(); }
        if (Gui.Button("Add Sobel")) { .Add("Sobel"); }
        if (Gui.Button("Add Bilateral")) { .Add("Bilateral"); }
        if (Gui.Button("Add Box Blur")) { .Add("BoxBlur"); }
        if (Gui.Button("Add Gaussian Blur")) { .Add("GaussianBlur"); }
        if (Gui.Button("Add Hough Transform")) { .Add("HoughTransform"); }
        if (Gui.Button("Add Hough Lines")) { .Add("HoughLines"); }
        
        foreach (filter in .chain)
        {
            Gui.Separator();

            filter.enabled = Gui.CheckBox("Enabled", filter.enabled);
            filter.Gui(); 
        }

        Gui.End();
    };

    ImageFilters.Update = function(source)
    {
        local current = source;

        foreach (item in .chain)
        {
            if (!?item.tex || item.tex.Dimen() != current.Dimen())
            {
                item.tex = Texture(current.Dimen());
            }

            item.tex = item.Apply(item.tex, current);
        }

        .final = current;
    };

    ImageFilters.Draw = function(x, y, source)
    {
		Gfx.Viewport( v2(0.0f), g_core.screenDimen );
		Gfx.BeginDefaultShader();
        .cam2d.Begin();

		Gfx.Color(Gfx.WHITE, 1.0f);

        local pos = v2(1.0f / g_core.screenDimen.x * x, 1.0f / g_core.screenDimen.y * y);
        local size = v2(320.0f, 240.0f);

        foreach (item in .chain)
        {
            if (!?item.tex)
            {
                continue;
            }

            item.tex.Bind(0);
            Gfx.DrawRectTexCoords(pos, size);
            item.tex.Unbind();
        }

        .cam2d.End();
		Gfx.EndDefaultShader();
		Gfx.Viewport( v2(0), g_core.screenDimen );
    };

    ImageFilters.GetTexture = function()
    {
        return .final;
    };

    ImageFilters.Add = function(name)
    {
        .chain[tableCount(.chain)] = this["Make" + name + "Filter"]();
    };

    ImageFilters.Clear = function()
    {
        .chain = table();
    };

    ImageFilters.Apply = function(source)
    {
        if (.final.Dimen() != source.Dimen())
        {
            .final = Texture(source.Dimen());
        }

        source.CopyInto(.final);

        foreach (item in .chain)
        {
            if (item.enabled == false)
            {
                continue;
            }

            item.Apply(.final, .final);
        }
    };

    return ImageFilters;
};

global MakeFiltersTest = function()
{
    local Main = {
    };

    Main.Init = function()
    {
        .update_id = this:thread(.Update);

        .speech_text = "hello";
        .stream_video0 = false;
        .stream_video1 = false;

		.cam2d = Cam2d();
		.cam2d.InitScreenSpaceSize( Window.GetDimen() );
		.cam2d.SetNearFar(v2(-1000.0f, 1000.0f ));

        .filters = MakeImageFilters();

        if (g_norobot)
        {
            .video0 = { GetTexture = function() { return .tex; }, tex = Texture( g_resourcePathPrefix + "common/img/hough_test.png" ), };
            .video1 = { GetTexture = function() { return .tex; }, tex = Texture( g_resourcePathPrefix + "common/img/hough_test.png" ), };
        }
        else
        {
            .video0 = GMVideoDisplay("top", g_ip, g_port);
            .video1 = GMVideoDisplay("bottom", g_ip, g_port);

            .video0.SetColorspace("RGB");
            .video1.SetColorspace("RGB");

            .video0.SetResolution("QQVGA");
            .video1.SetResolution("QQVGA");
        }

        if (g_dual_video_test)
        {
            .videoleft = Texture( g_resourcePathPrefix + "common/img/videoleft.png" );
            .videoright = Texture( g_resourcePathPrefix + "common/img/videoright.png" );
            .videodisparity = Texture( .videoleft.Dimen() );
        }
    };

    Main.Release = function()
    {
        threadKill(.update_id);
    };

    Main.ClearScreen = function()
    {
		Gfx.ClearColor( Gfx.BLUE * v3(0.1f), 1.0f );
		Gfx.ClearDepth(1.0f);
		Gfx.Clear( Gfx.COLOR_BUFFER_BIT | Gfx.DEPTH_BUFFER_BIT );
    };

    Main.Gui = function()
    {
        if (!g_norobot)
        {
            Gui.Begin("Robot", g_core.screenDimen.x.Int()-230, g_core.screenDimen.y.Int() - 5);

            if (Gui.Button("Open Hand"))
            {
                g_proxies.motion.Queue("openHand", "RHand");
            }

            if (Gui.Button("Close Hand"))
            {
                g_proxies.motion.Queue("closeHand", "RHand");
            }

            .speech_text = Gui.TextInput("Speech", .speech_text);
            if (Gui.Button("Say"))
            {
                g_proxies.speech.Queue("say", .speech_text);
            }

            if (g_proxies.motion.next != null)
            {
                Gui.Print("Pending: " + g_proxies.motion.next.fun);
            }
            else
            {
                Gui.Print("Pending: None");
            }

            .stream_video0 = Gui.CheckBox("Stream Video (Top)", .stream_video0);
            .stream_video1 = Gui.CheckBox("Stream Video (Bottom)", .stream_video1);

            Gui.End();

            .video0.SetActive(.stream_video0);
            .video1.SetActive(.stream_video1);

            .video0.Update();
            .video1.Update();
        }

        .DrawVideo();

        if (g_dual_video_test)
        {
            .DrawDualVideo();
        }
    };

    Main.DrawVideo = function()
    {
		Gfx.Viewport( v2(0.0f), g_core.screenDimen );
		Gfx.BeginDefaultShader();

        .cam2d.Begin();

		Gfx.Color(Gfx.WHITE, 1.0f);

        local vscale = 2.0f;
		local vsize = v2(160.0f, 120.0f) * vscale;
		local vpos = g_core.screenDimen * v2(0.8f, 0.5f) - vsize * 0.5f;

        .filters.Apply(.video0.GetTexture());

        local video0 = .filters.GetTexture();

        video0.Bind(0);
		Gfx.DrawRectTexCoords( vpos, vsize );
        video0.Unbind();
        
        vpos = vpos - v2(0.0f, vsize.y + 8.0f);

        Gfx.Color(Gfx.RED);
        Gfx.DrawRect(v2(0.0f), v2(32.0f));
        Gfx.Color(Gfx.BLUE);
        Gfx.DrawRect(g_core.screenDimen - v2(32.0f), v2(32.0f));

        .cam2d.End();

		Gfx.EndDefaultShader();
		Gfx.Viewport( v2(0), g_core.screenDimen );
    };

    Main.DrawDualVideo = function()
    {
		Gfx.Viewport( v2(0.0f), g_core.screenDimen );
		Gfx.BeginDefaultShader();

        .cam2d.Begin();

		Gfx.Color(Gfx.WHITE, 1.0f);

        local vscale = 2.0f;
		local vsize = v2(160.0f, 120.0f) * vscale;
		local vpos = g_core.screenDimen * v2(0.2f, 0.2f) - vsize * 0.5f;

        .videoleft.Bind(0);
		Gfx.DrawRectTexCoords( vpos, vsize );
        .videoleft.Unbind();
        
        vpos = vpos + v2(vsize.x + 32.0f, 0.0f);

        .videoright.Bind(0);
		Gfx.DrawRectTexCoords( vpos, vsize );
        .videoright.Unbind();

        vpos = vpos + v2(vsize.x * -0.5f - 16.0f, vsize.y + 32.0f);

        .videodisparity.Bind(0);
		Gfx.DrawRectTexCoords( vpos, vsize );
        .videodisparity.Unbind();

        .cam2d.End();

		Gfx.EndDefaultShader();
		Gfx.Viewport( v2(0), g_core.screenDimen );
    };

    Main.Update = function()
    {
        while (true)
        {
    		RegisterDraw( DrawLayers.Clear, .ClearScreen, this );
    		RegisterGui( .Gui, this );			
    		RegisterGui( .filters.Gui, .filters );			

            yield();
        }
    };

    Main.Init();
    return Main;
};

