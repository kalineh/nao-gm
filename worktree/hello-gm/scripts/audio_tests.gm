
// audio_tests.gm

Log("audio_tests.gm: Initializing...");

global MakeAudioTest = function()
{
    local Main = {
    };

    Main.Init = function()
    {
        .update_id = this:thread(.Update);

		.cam2d = Cam2d();
		.cam2d.InitScreenSpaceSize( Window.GetDimen() );
		.cam2d.SetNearFar(v2(-1000.0f, 1000.0f ));

        .audio = GMAudioStream("audio", g_ip, g_port);
        .use_microphone = true;
        .use_sine_wave = false;
        .sine_frequency = 5;
        .sine_amplitude = 0.5f;

        if ( !g_norobot )
        {
            .audio.SetActive(true);
        }
        else
        {
            // TODO: fix update order so we don't need to do this first
            .audio.AddInputDataSineWave(0, 1.0f);
        }
    };

    Main.Release = function()
    {
        threadKill(.update_id);
    };

    Main.ClearScreen = function()
    {
		Gfx.ClearColor( Gfx.BLUE * v3(0.1f), 1.0f );
		Gfx.ClearDepth(1.0f);
		Gfx.Clear( Gfx.COLOR_BUFFER_BIT | Gfx.DEPTH_BUFFER_BIT );
    };

    Main.Gui = function()
    {
        Gui.Begin("Audio", g_core.screenDimen.x.Int() - 310, g_core.screenDimen.y.Int() - 5);

        .use_microphone = Gui.CheckBox("Use Microphone", .use_microphone);
        .use_sine_wave = Gui.CheckBox("Use Sine Wave", .use_sine_wave);
        .sine_frequency = Gui.SliderInt("Sine Frequency", .sine_frequency, 1, 64);
        .sine_amplitude = Gui.SliderFloat("Sine Amplitude", .sine_amplitude, 0.0f, 2.0f);

        Gui.End();
    };

    Main.DrawWaveform = function()
    {
		Gfx.Viewport( v2(0.0f), g_core.screenDimen );
		Gfx.BeginDefaultShader();

        .cam2d.Begin();

		Gfx.Color(Gfx.WHITE, 1.0f);

        .audio.DrawWaveform(0, Gfx.BLUE, 1.0f);

        .audio.CalcBeatDFT(0);
        .audio.DrawBeatWaveform(0, Gfx.RED, 0.5f);

        //.audio.CalcAverageEnergies();
        //.audio.DrawEnergyDifferenceWaveform(Gfx.WHITE, 1.0f);

        .cam2d.End();

		Gfx.EndDefaultShader();
		Gfx.Viewport( v2(0), g_core.screenDimen );
    };

    Main.Update = function()
    {
        while (true)
        {
    		RegisterDraw( DrawLayers.Clear, .ClearScreen, this );
    		RegisterDraw( DrawLayers.Scene, .DrawWaveform, this );
    		RegisterGui( .Gui, this );			

            if (g_norobot)
            {
                .audio.ClearInputData(.sine_frequency);

                if (.use_microphone)
                {
                    .audio.AddInputDataMicrophone();
                }

                if (.use_sine_wave)
                {
                    .audio.AddInputDataSineWave(.sine_frequency, .sine_amplitude);
                }
            }
            else
            {
                .audio.Update();
            }

            yield();
        }
    };

    Main.Init();
    return Main;
};
