
// audio_tests.gm

Log("audio_tests.gm: Initializing...");

global MakeAudioTest = function()
{
    local Main = {
    };

    Main.Init = function()
    {
        .update_id = this:thread(.Update);

		.cam2d = Cam2d();
		.cam2d.InitScreenSpaceSize( Window.GetDimen() );
		.cam2d.SetNearFar(v2(-1000.0f, 1000.0f ));

        .audio = GMAudioStream("audio", g_ip, g_port);
        .notebrain = .audio.GetNoteBrain();
        assert(?.notebrain);
        //.synthesizer = .audio.GetSynthesizer();

        .scale_names = { "major", "minor" };
        .note_names = { "A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#" };

        .audio_gui = false;
        // TODO: scale will need to realtime balance based on overall nearby volume
        .use_dft = false;
        .fft_magnify_scale = 3.0f;
        .fft_magnify_power = 3.0f;
        .use_microphone = true;
        .use_sine_wave = false;
        .sine_frequency = 5;
        .sine_amplitude = 0.5f;

        .tuner_gui = true;
        .tuner_mode = true;
        .tuner_threshold = 0.1f;
        .tuner_forget_rate = 0.05f;
        .piano_playback_test = false;

        .beat_gui = true;
        .beat_estimate_mode = false;
        .beat_estimate_bin = 1;
        .beat_estimate_threshold = 0.01f;
        .beat_estimated_bps = 120 / 60;

        .beat_history_graph = LineGraph(0.0f, 60.0f, v2(256.0f, 32.0f), 60*5);
        .beat_history_graph.SetAutoSize(true);
        .fundamental_history_graph = LineGraph(0.0f, 12.0f, v2(256.0f, 32.0f), 60*5);
        .fundamental_history_graph.SetAutoSize(true);
        .fundamental_confidence_graphs = table();

        .info_scale_confidence_scale = 0;
        .info_scale_confidences = false;
        .info_note_confidences = false;
        .info_note_confidences_pause = false;
        .info_note_best_notes = false;

        for (i = 0; i < 12; i += 1)
        {
            .fundamental_confidence_graphs[i] = LineGraph(0.0f, 50.0f, v2(256.0f, 16.0f), 60*5);
            .fundamental_confidence_graphs[i].SetAutoSize(true);
        }

        .note_confidence_graphs = table();
        for (i = 0; i < 10; i += 1)
        {
            .note_confidence_graphs[i] = LineGraph(0.0f, 50.0f, v2(256.0f, 16.0f), 60*5);
            .note_confidence_graphs[i].SetAutoSize(true);
        }

        .draw_gui = false;
        .drawwave = {
            true,   // raw
            false,  // fft
            false,  // average
            false,  // difference
        };
        .drawbars = {
            false,  // raw
            true,   // fft
            false,  // average
            false,  // difference
        };

        .drawsynthesizer = false;

        .melody_gui = true;
        .melody_fundamental = 0;
        .melody_octave = 3;
        .melody_bpm = 120;
        .melody_measures = 4;
        .melody_beats = 2;
        .melody_beats_estimated = false;
        .melody_fundamental_estimated = false;

		.piano_soundbank = MakeSoundBank(g_resourcePathPrefix + "scripts/PianoSoundBank.gm");

        .info_gui = true;

        if ( !g_norobot )
        {
            .audio.SetActive(true);
        }

        .audio.Update();
    };

    Main.Release = function()
    {
        threadKill(.update_id);
    };

    Main.ClearScreen = function()
    {
		Gfx.ClearColor( Gfx.BLUE * v3(0.1f), 1.0f );
		Gfx.ClearDepth(1.0f);
		Gfx.Clear( Gfx.COLOR_BUFFER_BIT | Gfx.DEPTH_BUFFER_BIT );
    };

    Main.Gui = function()
    {
        Gui.Begin("Audio", g_core.screenDimen.x.Int() - 310, g_core.screenDimen.y.Int() - 5);

        if (Gui.Button("Reset Timers"))
        {
            .audio.ResetTimers();
        }

        Gui.Separator();

        .draw_gui = Gui.CheckBox("> Draw", .draw_gui);
        if (.draw_gui)
        {
            .drawwave[0] = Gui.CheckBox("Draw Wave (Raw)", .drawwave[0]);
            .drawwave[1] = Gui.CheckBox("Draw Wave (FFT)", .drawwave[1]);
            .drawwave[2] = Gui.CheckBox("Draw Wave (Average)", .drawwave[2]);
            .drawwave[3] = Gui.CheckBox("Draw Wave (Difference)", .drawwave[3]);
            .drawbars[0] = Gui.CheckBox("Draw Bars (Raw)", .drawbars[0]);
            .drawbars[1] = Gui.CheckBox("Draw Bars (FFT)", .drawbars[1]);
            .drawbars[2] = Gui.CheckBox("Draw Bars (Average)", .drawbars[2]);
            .drawbars[3] = Gui.CheckBox("Draw Bars (Difference)", .drawbars[3]);
            .drawsynthesizer = Gui.CheckBox("Draw Synthesizer", .drawsynthesizer);
        }

        Gui.Separator();

        .audio_gui = Gui.CheckBox("> Audio", .audio_gui);
        if (.audio_gui)
        {
            .fft_magnify_scale = Gui.SliderFloat("FFT Magnify Scale", .fft_magnify_scale, 0.001f, 10.0f);
            .fft_magnify_power = Gui.SliderFloat("FFT Magnify Power", .fft_magnify_power, 0.1f, 8.0f);
            .use_dft = Gui.CheckBox("Use DFT", .use_dft);
            .use_microphone = Gui.CheckBox("Use Microphone", .use_microphone);
            .use_sine_wave = Gui.CheckBox("Use Sine Wave", .use_sine_wave);
            .sine_frequency = Gui.SliderInt("Sine Frequency", .sine_frequency, 1, .audio.GetFFTWindowSize() / 2 - 1);
            .sine_amplitude = Gui.SliderFloat("Sine Amplitude", .sine_amplitude, 0.0f, 2.0f);
        }

        Gui.Separator();

        .melody_gui = Gui.CheckBox("> Melody", .melody_gui);
        if (.melody_gui)
        {
            .melody_beats_estimated = Gui.CheckBox("Use Estimated BPM", .melody_beats_estimated);
            .melody_fundamental_estimated = Gui.CheckBox("Use Estimated Fundamental", .melody_fundamental_estimated);

            .melody_fundamental = Gui.SliderInt("Melody Fundamental", .melody_fundamental, 0, 11);
            .melody_octave = Gui.SliderInt("Melody Octave", .melody_octave, 2, 6);
            .melody_bpm = Gui.SliderInt("Melody BPM", .melody_bpm, 60, 300);
            .melody_measures = Gui.SliderInt("Melody Measures", .melody_measures, 1, 16);
            .melody_beats = Gui.SliderInt("Melody Beats", .melody_beats, 1, 16);

            if (Gui.Button("Play Melody (1)")) { .PlayMelody(.PlayMelody1); }
            if (Gui.Button("Play Melody (2)")) { .PlayMelody(.PlayMelody2); }
            if (Gui.Button("Play Melody (3)")) { .PlayMelody(.PlayMelody3); }

            if (Gui.Button("Reset Mirror Notes")) { .audio.ResetMirrorNotes(); }
            if (Gui.Button("Play Mirror Notes")) { .audio.PlaybackMirrorNotes(); }
        }

        Gui.Separator();

        .tuner_gui = Gui.CheckBox("> Tuner", .tuner_gui);
        if (.tuner_gui)
        {
            .tuner_mode = Gui.CheckBox("Enable Tuner", .tuner_mode);
            .tuner_threshold = Gui.SliderFloat("Tuner Threshold", .tuner_threshold, 0.0001f, 1.0f);
            .tuner_forget_rate = Gui.SliderFloat("Scale Forget Rate", .tuner_forget_rate, 0.0001f, 1.0f);
        }

        Gui.Separator();

        .beat_gui = Gui.CheckBox("> Beat", .beat_gui);
        if (.beat_gui)
        {
            .beat_estimate_mode = Gui.CheckBox("Beat Estimate", .beat_estimate_mode);
            if (.beat_estimate_mode)
            {
                .beat_estimate_bin = Gui.SliderInt("Beat Estimate Bin", .beat_estimate_bin, 1, (.audio.GetFFTWindowSize() / 2 - 1) / 8);
                .beat_estimate_threshold = Gui.SliderFloat("Beat Estimate Threshold", .beat_estimate_threshold, 0.001f, 0.1f);
            }
            .piano_playback_test = Gui.CheckBox("Piano Playback Test", .piano_playback_test);
        }

        Gui.Separator();

        Gui.End();
    };

    Main.InfoGui = function()
    {
        Gui.Begin("Audio Info", 30, g_core.screenDimen.y.Int() - 40);

        .info_gui = Gui.CheckBox("> Info", .info_gui);
        if (.info_gui)
        {
            Gui.Print(format("Beats Per Second: %d", .beat_estimated_bps));
            Gui.Print(format("Beats Per Minute: %d", .beat_estimated_bps * 60));
            Gui.LineGraph(.beat_history_graph);
            .info_scale_confidence_scale = Gui.SliderInt("Scale", .info_scale_confidence_scale, 0, 1);
            Gui.Print("Scale: " + .scale_names[.notebrain.GetBestScaleScale(0)]);
            Gui.Print("Fundamental: " + .note_names[.notebrain.GetBestScaleFundamental(0)]);
            Gui.LineGraph(.fundamental_history_graph);

            Gui.Separator();

            .info_scale_confidences = Gui.CheckBox("Scale Confidences", .info_scale_confidences);
            if (.info_scale_confidences)
            {
                for (i = 0; i < 12; i += 1)
                {
                    local graph = .fundamental_confidence_graphs[i];
                    Gui.Print(.note_names[i] + " " + .scale_names[.info_scale_confidence_scale]);
                    Gui.LineGraph(graph);
                }
            }

            Gui.Separator();

            .info_note_confidences = Gui.CheckBox("Note Confidences", .info_note_confidences);
            if (.info_note_confidences)
            {
                .info_note_confidences_pause = Gui.CheckBox("Pause", .info_note_confidences_pause);
                if (!.info_note_confidences_pause)
                {
                    for (i = 0; i < 10; i += 1)
                    {
                        local graph = .note_confidence_graphs[i];
                        graph.PushVal(.notebrain.GetBestNoteNote(0).Float());
                    }
                }
            }

            .info_note_best_notes = Gui.CheckBox("Best Notes", .info_note_best_notes);
            if (.info_note_best_notes)
            {
                for (i = 0; i < 10; i += 1)
                {
                    local note = .notebrain.GetBestNoteNote(i);
                    local fundamental = note % 12;
                    local octave = note / 12;
                    local confidence = .notebrain.GetBestNoteConfidence(i);
                    Gui.Print("Note #" + i + ": " + .note_names[fundamental] + "" + octave + " @ " + confidence);
                }
            }

            Gui.Separator();
        }

        Gui.End();
    };

    Main.DrawAudio = function()
    {
		Gfx.Viewport( v2(0.0f), g_core.screenDimen );
		Gfx.BeginDefaultShader();

        .cam2d.Begin();

		Gfx.Color(Gfx.WHITE, 1.0f);

        if (.drawwave[0]) { .audio.DrawFrameRawWaveform(0, Gfx.BLUE, 1.0f); }
        if (.drawbars[0]) { .audio.DrawFrameRawBars(0, Gfx.BLUE, 1.0f); }

        if (.drawwave[1]) { .audio.DrawFrameFFTWaveform(0, Gfx.YELLOW, 0.5f); }
        if (.drawbars[1]) { .audio.DrawFrameFFTBars(0, Gfx.YELLOW, 0.5f); }

        if (.drawwave[2]) { .audio.DrawFrameAverageWaveform(Gfx.WHITE, 0.3f); }
        if (.drawbars[2]) { .audio.DrawFrameAverageBars(Gfx.WHITE, 0.3f); }

        if (.drawwave[3]) { .audio.DrawFrameDifferenceWaveform(Gfx.RED, 1.0f); }
        if (.drawbars[3]) { .audio.DrawFrameDifferenceBars(Gfx.RED, 1.0f); }

        if (.drawsynthesizer)
        {
            .audio.DrawSynthesizer(v2(1024.0f, 512.0f), Gfx.GREEN, 1.0f);
        }

        .cam2d.End();

		Gfx.EndDefaultShader();
		Gfx.Viewport( v2(0), g_core.screenDimen );
    };

    Main.Update = function()
    {
        while (true)
        {
    		RegisterDraw( DrawLayers.Clear, .ClearScreen, this );
    		RegisterDraw( DrawLayers.Scene, .DrawAudio, this );
    		RegisterGui( .Gui, this );			
    		RegisterGui( .InfoGui, this );			

            local pending_frames = true;

            while ( pending_frames )
            {
                pending_frames = false;

                .audio.ClearInputDataFrame();

                // frequency
                // framerate
                .audio.SetFFTMagnifyScale(.fft_magnify_scale);
                .audio.SetFFTMagnifyPower(.fft_magnify_power);

                .notebrain.SetForgetRate(.tuner_forget_rate);

                .audio.Update();

                if (g_norobot)
                {
                    if (.use_microphone)
                    {
                        .audio.UpdateMicrophoneBuffer();
                        .audio.AddInputDataFrameMicrophone();
                    }

                    if (.use_sine_wave)
                    {
                        .audio.AddInputDataFrameSineWave(.sine_frequency, .sine_amplitude);
                    }
                }
                else
                {
                    .audio.AddInputDataFrameRemoteNao();
                }

                if (.use_dft)
                { 
                    .audio.CalcFrameDFT(0);
                }
                else
                {
                    .audio.CalcFrameFFT(0);
                }

                .audio.CalcFrameAverageAndDifference(0);

                if (.beat_estimate_mode)
                {
                    .beat_estimated_bps = .audio.CalcEstimatedBeatsPerSecond(0, .beat_estimate_bin, .beat_estimate_threshold);
                    .beat_history_graph.PushVal( .beat_estimated_bps.Float() * 60.0f );
                }

                if (.melody_beats_estimated)
                {
                    .melody_bpm = (.beat_estimated_bps * 60.0f).Int();
                }

                if (.tuner_mode)
                {
                    //.audio.NoteTuner(.tuner_threshold);
                    .audio.CalcFramePitches(.tuner_threshold);

                    local best_note = .notebrain.GetBestNoteNote(0) % 12;

                    if (.melody_fundamental_estimated)
                    {
                        .melody_fundamental = best_note;
                    }

                    .fundamental_history_graph.PushVal(best_note.Float());
                }

                if (.info_scale_confidences)
                {
                    // so on the cpp side we need to track notes*octaves
                    for (i = 0; i < 12; i += 1)
                    {
                        local graph = .fundamental_confidence_graphs[i];
                        graph.PushVal(.notebrain.GetScaleConfidence(.info_scale_confidence_scale, i).Float());
                    }
                }

                if (.piano_playback_test)
                {
                    local notes = table();

                    .audio.TestGetPianoNotes(.tuner_threshold, notes);

                    local note_map = {
                        "piano_A",
                        "piano_A_sharp",
                        "piano_B",
                        "piano_C",
                        "piano_C_sharp",
                        "piano_D",
                        "piano_D_sharp",
                        "piano_E",
                        "piano_F",
                        "piano_F_sharp",
                        "piano_G",
                        "piano_G_sharp",
                    };

                    foreach ( note in notes )
                    {
                        local key = note % 12;
                        local note_name = note_map[key];

                        if (?.play_thread && threadIsAlive( .play_thread ) )
                        {
                            break;
                        }

                        .play_thread = this:thread( function(note_name) {
                            .piano_soundbank.Play(note_name);
                            sleep(1.0f / 60.0f * 8.0f);
                        }, note_name );
                    }

        			.piano_soundbank.PlayAllQueued();
                }
            }

            yield();
        }
    };

    Main.PlayMelody = function(melody)
    {
        local bpm = .melody_bpm;
        local root = .melody_octave * 12 + .melody_fundamental;//randint(25, 61);
        //local scale = { 0, 2, 4, 5, 7, 9, 11 }; // major
        local scale = { 0, 2, 3, 5, 7, 8, 10 }; // minor
        local beats_per_second = bpm / 60.0f;
        local measures = .melody_measures;
        local beats_per_measure = .melody_beats;
        local samples_per_second = 44100.0f;
        local samples_per_beat = samples_per_second / beats_per_second;

        this:melody(root, scale, measures, beats_per_measure, samples_per_beat);
    };

    Main.PlayMelody1 = function(root, scale, measures, beats_per_measure, samples_per_beat)
    {
        local count = randint(8, 12);
        local cursor = 0;
        local notes = table();
        local index = randint(0, tableCount(scale));

        for (i = 0; i < count; i += 1)
        {
            if (randint(0, 100) < 20)
            {
                index = max(0, index - 2);
            }

            if (randint(0, 100) < 60)
            {
                index = min(tableCount(scale) - 1, index + 1);
            }

            notes[i] = root + scale[index];
        }

        for (j = 0; j < measures; j += 1)
        {
            for (i = 0; i < beats_per_measure; i += 1)
            {
                if (randint(0, 100) < 10)
                {
                    notes[randint(0, tableCount(notes))] = notes[randint(0, tableCount(notes))];
                }

                local note = notes[i];
                local delay = 0;

                if (randint(0, 100) < 10)
                {
                    delay = samples_per_beat;
                }

                local samples = samples_per_beat * 1.0f;
                local amplitude = randfloat(0.4f, 0.6f);
                
                local octave = note / 12;
                local note = note % 12;

                .audio.TestAddSynthNote(cursor + delay.Int(), samples.Int(), octave, note, amplitude);

                cursor += delay.Int() + samples.Int();
            }
        }
    };

    Main.PlayMelody2 = function(root, scale, measures, beats_per_measure, samples_per_beat)
    {
        local cursor = 0;
        local loop = 4;
        local index = 0;

        for (m = 0; m < measures; m += 1)
        {
            index = 0;

            if (randint(0, 100) < 20) { index += randint(0, 2); }

            for (i = 0; i < beats_per_measure; i += 1)
            {
                local note = root + scale[index];
                
                index += 1;

                if (randint(0, 100) < 10) { index -= 1; }

                local samples = samples_per_beat * 1.0f;
                local amplitude = randfloat(0.4f, 0.6f);

                local octave = note / 12;
                local note = note % 12;

                .audio.TestAddSynthNote(cursor, samples.Int(), octave, note, amplitude);

                cursor += samples.Int();
            }
        }
    };

    Main.PlayMelody3 = function(root, scale, measures, beats_per_measure, samples_per_beat)
    {
        local cursor = 0;
        local loop = 4;
        local index = 0;
        local notes = table();

        for (i = 0; i < measures * beats_per_measure; i += 1)
        {
            local index = randint(0, 4);
            local note = .notebrain.GetBestNoteNote(index);
            local octave = root / 12;
            local fundamental = note % 12;

            local samples = samples_per_beat * 1.0f;
            local amplitude = randfloat(0.4f, 0.6f);

            .audio.TestAddSynthNote(cursor, samples.Int(), octave, fundamental, amplitude);

            cursor += samples.Int();
        }
    };

    Main.Init();
    return Main;
};
