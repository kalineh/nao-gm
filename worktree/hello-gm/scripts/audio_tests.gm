
// audio_tests.gm

Log("audio_tests.gm: Initializing...");

global MakeAudioTest = function()
{
    local Main = {
    };

    Main.Init = function()
    {
        .update_id = this:thread(.Update);

		.cam2d = Cam2d();
		.cam2d.InitScreenSpaceSize( Window.GetDimen() );
		.cam2d.SetNearFar(v2(-1000.0f, 1000.0f ));

        .audio = GMAudioStream("audio", g_ip, g_port);
        .fft_window_size = 256;
        .fft_magnify_scale = 60.0f;
        .fft_magnify_power = 1.0f;
        .use_microphone = true;
        .use_sine_wave = false;
        .sine_frequency = 5;
        .sine_amplitude = 0.5f;

        .tuner_mode = true;
        .tuner_threshold = 0.005f;

		.piano_soundbank = MakeSoundBank(g_resourcePathPrefix + "scripts/PianoSoundBank.gm");

        if ( !g_norobot )
        {
            .audio.SetActive(true);
        }

        .audio.Update();
    };

    Main.Release = function()
    {
        threadKill(.update_id);
    };

    Main.ClearScreen = function()
    {
		Gfx.ClearColor( Gfx.BLUE * v3(0.1f), 1.0f );
		Gfx.ClearDepth(1.0f);
		Gfx.Clear( Gfx.COLOR_BUFFER_BIT | Gfx.DEPTH_BUFFER_BIT );
    };

    Main.Gui = function()
    {
        Gui.Begin("Audio", g_core.screenDimen.x.Int() - 310, g_core.screenDimen.y.Int() - 5);

        .fft_window_size = Gui.SliderInt("FFT Window Size", .fft_window_size, 1, 2048);
        .fft_magnify_scale = Gui.SliderFloat("FFT Magnify Scale", .fft_magnify_scale, 1.0f, 60.0f * 10.0f);
        .fft_magnify_power = Gui.SliderFloat("FFT Magnify Power", .fft_magnify_power, 1.0f, 16.0f);
        .use_microphone = Gui.CheckBox("Use Microphone", .use_microphone);
        .use_sine_wave = Gui.CheckBox("Use Sine Wave", .use_sine_wave);
        .sine_frequency = Gui.SliderInt("Sine Frequency", .sine_frequency, 1, 64);
        .sine_amplitude = Gui.SliderFloat("Sine Amplitude", .sine_amplitude, 0.0f, 2.0f);
        .tuner_mode = Gui.CheckBox("Enable Tuner", .tuner_mode);
        .tuner_threshold = Gui.SliderFloat("Tuner Threshold", .tuner_threshold, 0.00001f, 0.01f);

        Gui.End();
    };

    Main.DrawWaveform = function()
    {
		Gfx.Viewport( v2(0.0f), g_core.screenDimen );
		Gfx.BeginDefaultShader();

        .cam2d.Begin();

		Gfx.Color(Gfx.WHITE, 1.0f);

        .audio.DrawRawWaveform(0, Gfx.BLUE, 1.0f);
        .audio.DrawFFTWaveform(0, Gfx.YELLOW, 0.5f);
        .audio.DrawAverageWaveform(Gfx.WHITE, 0.3f);
        .audio.DrawDifferenceWaveform(Gfx.RED, 1.0f);

        .cam2d.End();

		Gfx.EndDefaultShader();
		Gfx.Viewport( v2(0), g_core.screenDimen );
    };

    Main.Update = function()
    {
        while (true)
        {
    		RegisterDraw( DrawLayers.Clear, .ClearScreen, this );
    		RegisterDraw( DrawLayers.Scene, .DrawWaveform, this );
    		RegisterGui( .Gui, this );			

            .audio.SetFFTWindowSize(.fft_window_size);
            .audio.SetFFTMagnifyScale(.fft_magnify_scale);
            .audio.SetFFTMagnifyPower(.fft_magnify_power);

            .audio.ClearInputData();
            .audio.Update();

            if (g_norobot)
            {
                if (.use_microphone)
                {
                    .audio.AddInputDataMicrophone();
                }

                if (.use_sine_wave)
                {
                    .audio.AddInputDataSineWave(.sine_frequency, .sine_amplitude);
                }
            }
            else
            {
                .audio.AddInputDataRemoteNao();
            }

            .audio.CalcDFT(0);
            //.audio.CalcFFT(0);
            .audio.CalcAverageAndDifference(0);

            if (.tuner_mode)
            {
                // DEBUG TEST
                local notes = table();

                // TODO: fix name
                .audio.EstimateBPM(.tuner_threshold, notes);

                local note_map = {
                    "piano_A",
                    "piano_A_sharp",
                    "piano_B",
                    "piano_C",
                    "piano_C_sharp",
                    "piano_D",
                    "piano_D_sharp",
                    "piano_E",
                    "piano_F",
                    "piano_F_sharp",
                    "piano_G",
                    "piano_G_sharp",
                };

                foreach ( note in notes )
                {
                    local key = note % 12;
                    local note_name = note_map[key];

                    if (?.play_thread && threadIsAlive( .play_thread ) )
                    {
                        break;
                    }

                    .play_thread = this:thread( function(note_name) {
                        .piano_soundbank.Play(note_name);
                        sleep(1.0f / 60.0f * 8.0f);
                    }, note_name );
                }

    			.piano_soundbank.PlayAllQueued();
            }

            yield();
        }
    };

    Main.Init();
    return Main;
};
