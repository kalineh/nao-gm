
// init.gm

Log("init.gm: Initializing...");

local ip = "192.168.11.9";
local port = 9559;


local MakeSoundLooker = function()
{
    local SoundLooker = table();

    SoundLooker.Update = function()
    {
        while (true)
        {
            yield();
        }
    };

    return SoundLooker;
};

global MakeALProxy = function(type, ip, port)
{
    assert(?type);
    assert(?ip);
    assert(?port);

    local ALProxy = table();

    ALProxy.type = type;
    ALProxy.ip = ip;
    ALProxy.port = port;
    ALProxy.proxy = GMALProxy(type, ip, port);
    ALProxy.next = null;

    ALProxy.Init = function()
    {
        .update_id = this:thread(.Update);
    };

    ALProxy.Release = function()
    {
        threadKill(.update_id);
    };

    ALProxy.CallReturnVariable = function(f, a)
    {
        return .proxy.CallReturnVariable(f, a);
    };

    ALProxy.CallReturnFloat = function(f, a)
    {
        return .proxy.CallReturnFloat(f, a);
    };

    ALProxy.CallVoid = function(f, a)
    {
        Log("CallVoid: " + f);
        .proxy.CallVoid(f, a);
    };

    ALProxy.PostCall = function(f, a)
    {
        Log("PostCall: " + f);
        .proxy.PostCall(f, a);

        while (.proxy.IsRunning())
        {
            yield();
        }
    };

    ALProxy.Update = function()
    {
        while (true)
        {
            if (.next != null)
            {
                local fun = .next.fun;
                local arg = .next.arg;
                .next = null;
                .PostCall(fun, arg);
            }

            yield();
        }
    };

    ALProxy.Queue = function(f, a)
    {
        .next = { fun=f, arg=a };
    };

    ALProxy.Init();
    return ALProxy;
};

global MakeStatusDisplay = function()
{
    local StatusDisplay = {
        show = {
            LHand = false,
            RHand = false,
            LArm = false,
            RArm = false,
            Head = false,
            Battery = false,
            ChestLed = false,
        },
    };

    StatusDisplay.Init = function()
    {
        .update_id = this:thread(.Update);
    };

    StatusDisplay.Update = function()
    {
        while (true)
        {
    		RegisterGui( .Gui, this );			
            yield();
        }
    };

    StatusDisplay.Gui = function()
    {
        Gui.Begin("Status", g_core.screenDimen.x.Int()-450, g_core.screenDimen.y.Int() - 5);

        .show.LHand = Gui.CheckBox("Hand - Left", .show.LHand);
        .show.RHand = Gui.CheckBox("Hand - Right", .show.RHand);
        .show.LArm = Gui.CheckBox("Arm - Left", .show.LArm);
        .show.RArm = Gui.CheckBox("Arm - Right", .show.RArm);
        .show.Head = Gui.CheckBox("Head", .show.Head);
        .show.Battery = Gui.CheckBox("Battery", .show.Battery);
        .show.ChestLed = Gui.CheckBox("Chest Led", .show.ChestLed);

        Gui.Separator();
            
        local display = function(name, key)
        {
            local value = g_proxies.memory.CallReturnVariable("getData", key);
            if (!?value) { value = "null"; }
            local str = name + ": " + value.String();
            Gui.Print(str);
        };

        // Retrieving memory data like this is slow. Replace with memory.getDataPtr() in some kind of memory key/cache object.

        if (.show.LHand)
        {
            Gui.Print("Hand - Left");
            this:display("Current", "Device/SubDeviceList/LHand/ElectricCurrent/Sensor/Value");
            this:display("Position", "Device/SubDeviceList/LHand/Position/Sensor/Value");
            this:display("Temperature", "Device/SubDeviceList/LHand/Temperature/Sensor/Value");
            this:display("Touch - Back", "Device/SubDeviceList/LHand/Touch/Back/Sensor/Value");
            this:display("Touch - Left", "Device/SubDeviceList/LHand/Touch/Left/Sensor/Value");
            this:display("Touch - Right", "Device/SubDeviceList/LHand/Touch/Right/Sensor/Value");
            Gui.Separator();
        }

        if (.show.RHand)
        {
            Gui.Print("Hand - Right");
            this:display("Current", "Device/SubDeviceList/RHand/ElectricCurrent/Sensor/Value");
            this:display("Position", "Device/SubDeviceList/RHand/Position/Sensor/Value");
            this:display("Temperature", "Device/SubDeviceList/RHand/Temperature/Sensor/Value");
            this:display("Touch - Back", "Device/SubDeviceList/RHand/Touch/Back/Sensor/Value");
            this:display("Touch - Left", "Device/SubDeviceList/RHand/Touch/Left/Sensor/Value");
            this:display("Touch - Right", "Device/SubDeviceList/RHand/Touch/Right/Sensor/Value");
            Gui.Separator();
        }

        if (.show.LArm)
        {
            Gui.Print("Arm - Left");
            this:display("Shoulder Pitch - Current", "Device/SubDeviceList/LShoulderPitch/ElectricCurrent/Sensor/Value");
            this:display("Shoulder Pitch - Hardness", "Device/SubDeviceList/LShoulderPitch/Hardness/Actuator/Value");
            this:display("Shoulder Pitch - Position", "Device/SubDeviceList/LShoulderPitch/Position/Sensor/Value");
            this:display("Shoulder Pitch - Temperature", "Device/SubDeviceList/LShoulderPitch/Temperature/Sensor/Value");
            this:display("Shoulder Roll - Current", "Device/SubDeviceList/LShoulderRoll/ElectricCurrent/Sensor/Value");
            this:display("Shoulder Roll - Hardness", "Device/SubDeviceList/LShoulderRoll/Hardness/Actuator/Value");
            this:display("Shoulder Roll - Position", "Device/SubDeviceList/LShoulderRoll/Position/Sensor/Value");
            this:display("Shoulder Roll - Temperature", "Device/SubDeviceList/LShoulderRoll/Temperature/Sensor/Value");
            Gui.Separator();
        }

        if (.show.RArm)
        {
            Gui.Print("Arm - Right");
            this:display("Shoulder Pitch - Current", "Device/SubDeviceList/RShoulderPitch/ElectricCurrent/Sensor/Value");
            this:display("Shoulder Pitch - Hardness", "Device/SubDeviceList/RShoulderPitch/Hardness/Actuator/Value");
            this:display("Shoulder Pitch - Position", "Device/SubDeviceList/RShoulderPitch/Position/Sensor/Value");
            this:display("Shoulder Pitch - Temperature", "Device/SubDeviceList/RShoulderPitch/Temperature/Sensor/Value");
            this:display("Shoulder Roll - Current", "Device/SubDeviceList/RShoulderRoll/ElectricCurrent/Sensor/Value");
            this:display("Shoulder Roll - Hardness", "Device/SubDeviceList/RShoulderRoll/Hardness/Actuator/Value");
            this:display("Shoulder Roll - Position", "Device/SubDeviceList/RShoulderRoll/Position/Sensor/Value");
            this:display("Shoulder Roll - Temperature", "Device/SubDeviceList/RShoulderRoll/Temperature/Sensor/Value");
            Gui.Separator();
        }

        if (.show.Head)
        {
            Gui.Print("Head");
            this:display("Pitch - Hardness", "Device/SubDeviceList/HeadPitch/Hardness/Actuator/Value");
            this:display("Pitch - Position", "Device/SubDeviceList/HeadPitch/Position/Actuator/Value");
            this:display("Yaw - Hardness", "Device/SubDeviceList/HeadYaw/Hardness/Actuator/Value");
            this:display("Yaw - Position", "Device/SubDeviceList/HeadYaw/Position/Actuator/Value");
            Gui.Separator();
        }

        if (.show.Battery)
        {
            Gui.Print("Battery");
            this:display("Temperature", "Device/SubDeviceList/Battery/Temperature/Sensor/Value");
            this:display("Plugged In", "Device/SubDeviceList/HeadPitch/Position/Actuator/Value");
            this:display("Charge", "Device/SubDeviceList/Battery/Charge/Sensor/Value");
            Gui.Separator();
        }

        if (.show.ChestLed)
        {
            Gui.Print("Chest Led");
            this:display("Ear - Left - Blue", "Device/SubDeviceList/ChestBoard/Led/Blue/Actuator/Value");
            this:display("Ear - Let - Red", "Device/SubDeviceList/ChestBoard/Led/Red/Actuator/Value");
            this:display("Chest - Blue", "Device/SubDeviceList/ChestBoard/Led/Blue/Actuator/Value");
            this:display("Chest - Red", "Device/SubDeviceList/ChestBoard/Led/Red/Actuator/Value");
            Gui.Separator();
        }

        Gui.End();
    };

    StatusDisplay.Init();
    return StatusDisplay;
};

global MakeProxies = function(ip, port)
{
    local Proxies = {
        ip = ip,
        port = port,
    };

    Proxies.Init = function()
    {
        .motion = MakeALProxy("ALMotion", .ip, .port);
        .speech = MakeALProxy("ALTextToSpeech", .ip, .port);
        .memory = MakeALProxy("ALMemory", .ip, .port);
    };

    Proxies.Release = function()
    {
        .motion.Release();
        .speech.Release();
        .memory.Release();
    };

    Proxies.Init();
    return Proxies;
};

global MakeMain = function()
{
    local Main = {
        status = MakeStatusDisplay(),
    };

    Main.Init = function()
    {
        .update_id = this:thread(.Update);

        .speech_text = "hello";

        .status.Init();

        .videotex = Texture( v2(128.0f, 128.0f) );
    };

    Main.Release = function()
    {
        .status.Release();
        threadKill(.update_id);
    };

    Main.ClearScreen = function()
    {
		Gfx.ClearColor( Gfx.BLUE * v3(0.1f), 1.0f );
		Gfx.ClearDepth(1.0f);
		Gfx.Clear( Gfx.COLOR_BUFFER_BIT | Gfx.DEPTH_BUFFER_BIT );
    };

    Main.Gui = function()
    {
        Gui.Begin("Robot", g_core.screenDimen.x.Int()-230, g_core.screenDimen.y.Int() - 5);

        if (Gui.Button("Open Hand"))
        {
            g_proxies.motion.Queue("openHand", "RHand");
        }

        if (Gui.Button("Close Hand"))
        {
            g_proxies.motion.Queue("closeHand", "RHand");
        }

        .speech_text = Gui.TextInput("Speech", .speech_text);
        if (Gui.Button("Say"))
        {
            g_proxies.speech.Queue("say", .speech_text);
        }

        if (g_proxies.motion.next != null)
        {
            Gui.Print("Pending: " + g_proxies.motion.next.fun);
        }
        else
        {
            Gui.Print("Pending: None");
        }

        if (Gui.Button("Snapshot"))
        {
            // dummy proxy
            g_proxies.memory.proxy.GetVideoData(.videotex, g_ip, g_port);
        }

        Gui.End();

    	//Game.BeginScreenSpace = function()
    	//{
    		//.BeginViewport();
    		//Gfx.Enable(Gfx.LINE_SMOOTH);
    		//Gfx.Enable(Gfx.BLEND);
    		//Gfx.Disable(Gfx.DEPTH_TEST);

    		//.camScreen.Begin();
    	//};

    	//Game.EndScreenSpace = function()
    	//{
    		//.camScreen.End();
    		//.EndViewport();
    		//Gfx.Disable(Gfx.LINE_SMOOTH);
    		//Gfx.Disable(Gfx.BLEND);
    	//};

        // draw tex
		local dimen = Window.GetMonitorDimen();
		Gfx.Viewport( g_core.screenDimen*0.5f - dimen*0.5f, dimen );
		Gfx.BeginDefaultShader();

		Gfx.Color(Gfx.WHITE, 1.0f);
		.videotex.Bind(0);
		local dimen = .videotex.Dimen();
		local pos = v2(0.0f, 0.0f);
		Gfx.DrawRectTexCoords( pos, v2(0.5f));
		.videotex.Unbind();
		Gfx.EndDefaultShader();
		Gfx.Viewport( v2(0), g_core.screenDimen );

    };

    Main.Update = function()
    {
        while (true)
        {
    		RegisterDraw( DrawLayers.Clear, .ClearScreen, this );
    		RegisterGui( .Gui, this );			

            yield();
        }
    };

    Main.Init();
    return Main;
};

global g_ip = "192.168.11.9";
global g_port = 9559;

global g_main = MakeMain(ip, port);
global g_proxies = MakeProxies(ip, port);

		Gfx.Viewport( v2(0), g_core.screenDimen );