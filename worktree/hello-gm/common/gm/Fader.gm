local CreateFader = function()
{
	local Fader = {};
	Fader.threadId = 0;

	Fader.screenCam2d = Cam2d();
	Fader.screenCam2d.InitScreenSpace();

	Fader.Init = function()
	{
		.threadId = 0;
	};

	Fader.KillFade = function()
	{
		if ( .threadId > 0 )
		{
			if ( threadIsAlive(.threadId ))
			{
				threadKill(.threadId);
			}
			.threadId = 0;
		}
	};

	Fader.Flash = function( secondsIn, secondsOut, color, callbackFinishFunc = null, callbackObj = null, callbackArgs = null )
	{
		Log("Flash..");
		assert( secondsIn >= 0.0f && secondsOut >= 0.0f && ?color );

		.KillFade();

		fork id
		{
			threadSetGroup( ThreadGroups.MAIN );

			local data = 
			{
				fadeCoeff = 0.0f,
				color = color
			};

			// Fade in
			while( data.fadeCoeff < 1.0f)
			{
				data.fadeCoeff += g_dt	/ secondsIn;
				RegisterDraw( DrawLayers.ScreenFade, .Draw, this, data );

				yield();
			}
			data.fadeCoeff = 1.0f;

			// Fade out
			while( data.fadeCoeff > 0.0f)
			{
				data.fadeCoeff -= g_dt	/ secondsOut;
				RegisterDraw( DrawLayers.ScreenFade, .Draw, this, data );

				yield();
			}

			// callback object
			if ( ?callbackFinishFunc )	{ callbackObj:callbackFinishFunc(callbackArgs); }

			.KillFade();
		};

		
		.threadId = id;
	};

	Fader.FadeIn = function( seconds, color, callbackFinishFunc = null, callbackObj = null, callbackArgs = null )
	{
		Log("Fade In..");

		assert( seconds >= 0.0f && ?color );

		.KillFade();

		fork id
		{
			threadSetGroup( ThreadGroups.MAIN );

			local data = 
			{
				fadeCoeff = 1.0f,
				color = color
			};

			while( data.fadeCoeff > 0.0f)
			{
				data.fadeCoeff -= g_dt	/ seconds;
				RegisterDraw( DrawLayers.ScreenFade, .Draw, this, data );

				yield();
			}

			// callback object
			if ( ?callbackFinishFunc )	{ callbackObj:callbackFinishFunc(callbackArgs); }

			.KillFade();
		};

		.threadId = id;
	};

	Fader.FadeOut = function( seconds, color, callbackFinishFunc = null, callbackObj = null, callbackArgs = null )
	{
		Log("Fade Out..");
		assert( seconds >= 0.0f && ?color );

		.KillFade();

		fork id
		{
			threadSetGroup( ThreadGroups.MAIN );

			local data = 
			{
				fadeCoeff = 0.0f,
				color = color
			};

			while( data.fadeCoeff < 1.0f)
			{
				data.fadeCoeff += g_dt	/ seconds;
				RegisterDraw( DrawLayers.ScreenFade, .Draw, this, data );

				yield();
			}

			// callback object
			if ( ?callbackFinishFunc )	{ callbackObj:callbackFinishFunc(callbackArgs); 	}

			// Register one more call or else the game will flicker one frame
			RegisterDraw( DrawLayers.ScreenFade, .Draw, this, data );

			.KillFade();
		};

		.threadId = id;
	};

	Fader.Draw = function( data )
	{
		Gfx.Enable(Gfx.BLEND);

		.screenCam2d.Begin();
		Gfx.BeginDefaultShader();

		Gfx.Color( data.color, data.fadeCoeff );
		Gfx.DrawRect(v2(0), v2(g_core.screenDimen) );

		Gfx.EndDefaultShader();
		.screenCam2d.End();
	};

	return Fader;
};

global g_fader = CreateFader();
g_fader.Init();