global CreatePostProcessBloom = function()
{
	local Bloom = 
	{
		luminThreshold = 0.2f,
		bloomPower = 2.0f,
		bloomCoeff = 1.2f,
		numBlurPasses = 1,
		numMipMaps = 3,
		blurRadius = 1.0f,
	};

	Bloom.InitFbos = function()
	{
		.rawFbo =  Fbo( g_core.screenDimen.x, g_core.screenDimen.y );

		.mipMaps = array(.numMipMaps);

		for ( i = 0; i < .numMipMaps; i+=1 )
		{
			local texSize = 512 >> i;
			.mipMaps[i] = Fbo( texSize, texSize );
		}

		// blurred tex
		.blurTexs = array(2);
		.blurTexs[0] = .mipMaps[.numMipMaps-1];
		.blurTexs[1] = Fbo( .blurTexs[0].Width(), .blurTexs[0].Height() );
	};

	Bloom.InitShaders = function()
	{
		.shaderGaussian = CreateShaderProgramFromFilename(g_resourcePathPrefix + "common/shader/fboDefault.vp", g_resourcePathPrefix + "common/shader/gaussianBlur.fp" );
		.shaderThreshold = CreateShaderProgramFromFilename(g_resourcePathPrefix + "common/shader/fboDefault.vp", g_resourcePathPrefix + "common/shader/bloomThreshold.fp" );
		.shaderBloom = CreateShaderProgramFromFilename(g_resourcePathPrefix + "common/shader/fboDefault.vp", g_resourcePathPrefix + "common/shader/bloomFinal.fp" );
	};
	
	Bloom.Init = function()
	{
		.InitFbos();
		.InitShaders();

		fork id
		{
			while(true)
			{
				RegisterDraw( DrawLayers.Offscreen_Begin, .BeginDraw, this );
				RegisterDraw( DrawLayers.Offscreen_End, .EndDraw, this );
				RegisterDraw( DrawLayers.Offscreen_Bloom, .DrawBloom, this );

				yield();
			}
		}

		.drawThreadId = id;
	};

	Bloom.BeginDraw = function()
	{
		.rawFbo.Begin();

		Gfx.Clear( Gfx.COLOR_BUFFER_BIT | Gfx.DEPTH_BUFFER_BIT );
		Gfx.Disable(Gfx.TEXTURE_2D);
	};

	Bloom.DrawMipMaps = function()
	{
		Gfx.DefaultFboShader.Begin();
		Gfx.DefaultFboShader.Uniform("tex",0);

		// first mipmap render
		local firstMipMap = .mipMaps[0];
		local rawTex = .rawFbo.GetTex();
		firstMipMap.Begin();
		rawTex.Bind(0);
		Gfx.DrawScreenUV();
		rawTex.Unbind();
		firstMipMap.End();

		// draw mipmaps
		for( i = 1; i < .mipMaps.Size(); i+=1 )
		{
			local prevMipTex = .mipMaps[i-1].GetTex();
			local currMip = .mipMaps[i];

			currMip.Begin();

			prevMipTex.Bind(0);
			Gfx.DrawScreenUV();
			prevMipTex.Unbind();

			currMip.End();
		}

		Gfx.DefaultFboShader.End();
	};

	Bloom.DrawBlur = function()
	{
		local width  = .blurTexs[0].Width();
		local height = .blurTexs[0].Height();
		local deltaU = .blurRadius / width;
		local deltaV = .blurRadius / height;

		// shader
		.shaderGaussian.Begin();
		.shaderGaussian.Uniform( "tex", 0 );

		for ( i = 0; i < .numBlurPasses; i += 1 )
		{
			// Vert blur
			.blurTexs[0].Begin();
			.blurTexs[1].GetTex().Bind(0);
			.shaderGaussian.Uniform( "uvDelta", 0.0f, deltaV, 0.0f, 0.0f );
			Gfx.DrawScreenUV();
			.blurTexs[1].GetTex().Unbind(0);
			.blurTexs[0].End();

			// Horiz blur
			.blurTexs[1].Begin();
			.blurTexs[0].GetTex().Bind(0);
			.shaderGaussian.Uniform( "uvDelta", deltaU, 0.0f, 0.0f, 0.0f );
			Gfx.DrawScreenUV();
			.blurTexs[0].GetTex().Unbind(0);
			.blurTexs[1].End();
		}
		
		.shaderGaussian.End();
	};

	Bloom.DrawThreshold = function()
	{
		local width = .blurTexs[0].Width();
		local height = .blurTexs[0].Height();

		// shader
		.shaderThreshold.Begin();
		.shaderThreshold.Uniform("tex",0);
		.shaderThreshold.Uniform( "thresholdLumin", .luminThreshold, 0.0f, 0.0f, 0.0f );

		.blurTexs[1].Begin();
		.blurTexs[0].GetTex().Bind(0);
		Gfx.DrawScreenUV();
		.blurTexs[0].GetTex().Unbind();
		.blurTexs[1].End();

		.shaderThreshold.End();
	};

	Bloom.DrawFinal = function()
	{
		.shaderBloom.Begin();
		.shaderBloom.Uniform("texRaw",1);
		.shaderBloom.Uniform("texBloom",2);
		.shaderBloom.Uniform("bloomData", .bloomCoeff, .bloomPower, 0.0f, 0.0f );

		.rawFbo.GetTex().Bind(1);
		.blurTexs[1].GetTex().Bind(2);
		Gfx.DrawScreenUV();
		.rawFbo.GetTex().Unbind();
		.blurTexs[1].GetTex().Unbind();

		.shaderBloom.End();
	};

	Bloom.DrawRaw = function()
	{
		Gfx.DefaultFboShader.Begin();
		Gfx.DefaultFboShader.Uniform("tex",0);

		.rawFbo.GetTex().Bind(0);
		//Gfx.DrawScreenUV(v2(0.0, 0.2), v2(0.2f) );
		Gfx.DrawScreenUV();
		.rawFbo.GetTex().Unbind();

		Gfx.DefaultFboShader.End();
	};

	Bloom.DrawDebug = function()
	{
		Gfx.DefaultFboShader.Begin();
		Gfx.DefaultFboShader.Uniform("tex",0);

		.blurTexs[1].GetTex().Bind(0);
		Gfx.DrawScreenUV( v2(0.0), v2(0.2f) );
		.blurTexs[1].GetTex().Unbind();

		Gfx.DefaultFboShader.End();
	};

	Bloom.EndDraw = function()
	{
		.rawFbo.End();
	};

	Bloom.DrawBloom = function()
	{
		.DrawMipMaps();
		.DrawThreshold();
		.DrawBlur();
		.DrawFinal();
	
		// debugging
		//.DrawDebug();
		//.DrawRaw();
	};

	Bloom.Release = function()
	{
		.mipmaps = null;
		threadKill(.drawThreadId);
	};

	Bloom.Init();	
	return Bloom;
};